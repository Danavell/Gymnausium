//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SignalR.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Create", ReplyAction="http://tempuri.org/IUserService/CreateResponse")]
        bool Create(Model_Layer.InternalInfoUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Create", ReplyAction="http://tempuri.org/IUserService/CreateResponse")]
        System.Threading.Tasks.Task<bool> CreateAsync(Model_Layer.InternalInfoUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Update", ReplyAction="http://tempuri.org/IUserService/UpdateResponse")]
        bool Update(Model_Layer.InternalInfoUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Update", ReplyAction="http://tempuri.org/IUserService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(Model_Layer.InternalInfoUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Disable", ReplyAction="http://tempuri.org/IUserService/DisableResponse")]
        bool Disable(Model_Layer.ExternalInfoUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Disable", ReplyAction="http://tempuri.org/IUserService/DisableResponse")]
        System.Threading.Tasks.Task<bool> DisableAsync(Model_Layer.ExternalInfoUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/BlockUser", ReplyAction="http://tempuri.org/IUserService/BlockUserResponse")]
        bool BlockUser(Model_Layer.ExternalInfoUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/BlockUser", ReplyAction="http://tempuri.org/IUserService/BlockUserResponse")]
        System.Threading.Tasks.Task<bool> BlockUserAsync(Model_Layer.ExternalInfoUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetMatchedUsers", ReplyAction="http://tempuri.org/IUserService/GetMatchedUsersResponse")]
        Model_Layer.ExternalInfoUser[] GetMatchedUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetMatchedUsers", ReplyAction="http://tempuri.org/IUserService/GetMatchedUsersResponse")]
        System.Threading.Tasks.Task<Model_Layer.ExternalInfoUser[]> GetMatchedUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : SignalR.ServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<SignalR.ServiceReference.IUserService>, SignalR.ServiceReference.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Create(Model_Layer.InternalInfoUser user) {
            return base.Channel.Create(user);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsync(Model_Layer.InternalInfoUser user) {
            return base.Channel.CreateAsync(user);
        }
        
        public bool Update(Model_Layer.InternalInfoUser user) {
            return base.Channel.Update(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(Model_Layer.InternalInfoUser user) {
            return base.Channel.UpdateAsync(user);
        }
        
        public bool Disable(Model_Layer.ExternalInfoUser user) {
            return base.Channel.Disable(user);
        }
        
        public System.Threading.Tasks.Task<bool> DisableAsync(Model_Layer.ExternalInfoUser user) {
            return base.Channel.DisableAsync(user);
        }
        
        public bool BlockUser(Model_Layer.ExternalInfoUser user) {
            return base.Channel.BlockUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> BlockUserAsync(Model_Layer.ExternalInfoUser user) {
            return base.Channel.BlockUserAsync(user);
        }
        
        public Model_Layer.ExternalInfoUser[] GetMatchedUsers() {
            return base.Channel.GetMatchedUsers();
        }
        
        public System.Threading.Tasks.Task<Model_Layer.ExternalInfoUser[]> GetMatchedUsersAsync() {
            return base.Channel.GetMatchedUsersAsync();
        }
    }
}
